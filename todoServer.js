/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const fs = require('fs');
const port = 3000

app.use(bodyParser.json());

function generateRandomNumber() {
  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
}

function DeleteTodoById(req, res) {
  const id = req.params.id;

  fs.readFile("TodoList.json", 'utf8', (err, data) => {
    if (err) {
      return res.status(500).send('File reading error');
    }

    let todos = JSON.parse(data);
    let index = -1;

    for (let i = 0; i < todos.length; i++) {
      if (todos[i].todoId === id) {
        index = i;
        break;
      }
    }

    if (index === -1) {
      return res.status(404).send('Todo not found');
    }

    todos.splice(index, 1);
    const updatedData = JSON.stringify(todos);

    fs.writeFile('TodoList.json', updatedData, 'utf8', (writeErr) => {
      if (writeErr) {
        return res.status(500).send('Error writing to file');
      }
      res.status(200).send("Deleted todo " + id + " successfully");
    });
  });
}


function CreateNewTodo(req, res){
  fs.readFile('TodoList.json', 'utf8', (readErr, data) => {
    if (readErr) {
        console.error('Error reading the file:', readErr);
        return;
    }
    todos = JSON.parse(data);
    id = generateRandomNumber(); 
    newItem= req.body;
    newItem.todoId = id.toString();
    todos.push(newItem);
    const updatedData = JSON.stringify(todos);

    // Write the updated JSON string back to the file
    fs.writeFile('TodoList.json', updatedData, 'utf8', (writeErr) => {
        if (writeErr) {
            console.error('Error writing the file:', writeErr);
            return;
        }
        console.log('New item added successfully');
    });
    res.status(200).send("Created new todo "+id +" successfully");
    });

}

app.use(express.json());

function UpdateTodoById(req, res){
  const id = req.params.id;

  fs.readFile("TodoList.json", 'utf8', (err, data) => {
    if (err) {
      return res.status(500).send('File reading error');
    }

    const todos = JSON.parse(data);
    const todo = todos.find(t => t.todoId === id); // find the todo

    if (!todo) {
      return res.status(404).send('Todo not found'); // if todo not found, return
    }

    // Update the found todo
    todo.title = req.body.title;
    todo.completed = req.body.completed;
    todo.description = req.body.description;

    const updatedData = JSON.stringify(todos);

    fs.writeFile('TodoList.json', updatedData, 'utf8', (writeErr) => {
      if (writeErr) {
        return res.status(500).send('Error writing to file');
      }
      res.status(200).send("Updated todo " + id + " successfully");
    });
  });
}


function GetTodobyId(req, res){
  id = req.params.id;
  fs.readFile("TodoList.json", 'utf8',(err, data) => {
    if (err) {
      return res.status(500).send('File reading error');
    }
    const todos = JSON.parse(data);
    let todo;
    for (let i = 0; i < todos.length; i++) {
        if (todos[i].todoId === id) {
            todo = todos[i];
            console.log(todo)
            break;
        }
    }
    if (!todo) {
      return res.status(404).send('Todo not found');
    }
    res.status(200).send(todo);
  });
}

function GetListofTodos(req, res){
  fs.readFile("TodoList.json", 'utf8',(err, data) => {
    if (err) {
      return res.status(500).send('File reading error');
    }
    const todos = JSON.parse(data);

    // Begin creating an HTML string to send as a response
    let html = `<!DOCTYPE html>
    <html lang="en">
    <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">`;
    html += '<title>Todo List</title></head><body><h1>Todo List</h1><ul>';
    
    // Loop through todos and append each as a list item in the HTML string
    todos.forEach(todo => {
      html += '<li>';
      html += `<strong>ID:</strong> ${todo.todoId}<br>`;
      html += `<strong>Title:</strong> ${todo.title}<br>`;
      html += `<strong>Completed:</strong> ${todo.completed}<br>`;
      html += `<strong>Description:</strong> ${todo.description}`;
      html += '</li><br>';
    });
    
    // Close the ul, body, and html tags
    html += '</ul></body></html>';

    // Send the HTML string as the response
    res.status(200).send(html);
  });
}
  
app.get('/todos', GetListofTodos)
app.get('/todos/:id', GetTodobyId)
app.post('/todos', CreateNewTodo)
app.put('/todos/:id', UpdateTodoById)
app.delete('/todos/:id', DeleteTodoById)

// Handling undefined URL routes with 404 error
app.use((req, res, next) => {
  res.status(404).send('<h1> Error 404: Not Found </h1>');
});

function started(){
    console.log(`Todo List app listening on port ${port}`)
}


app.listen(port, started) 
module.exports = app;
